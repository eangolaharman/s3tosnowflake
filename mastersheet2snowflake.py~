import boto3
import os
import pandas as pd
from io import BytesIO
import re
from ReadSnowflake import ReadSnowflake

class Mastersheet2Snowflake():

    def __init__(self,bucket_name='channeldataforecastingprod',\
        prefix='data/na/results_consolidation/master_sheets/',\
        local_dir='tmp',region='NA'):
        self.reader = ReadSnowflake()
        self.region = region
        self.bucket_name = bucket_name
        self.prefix = prefix
        self.local_dir = local_dir
        self.s3 = self._connect_s3()
    
    def main(self):
        
        response = self.get_all_files()

    def _connect_s3(self):
    
        s3 = boto3.client('s3')

        return s3

    def get_all_files(self):

        response = self.s3.list_objects_v2(Bucket=self.bucket_name, Prefix=self.prefix)

        return response

    def download_all_files(self,response):
        
        if 'Contents' in response:
            for obj in response['Contents']:
                key = obj['Key']
                filename = os.path.join(self.local_dir, os.path.basename(key))
                self.s3.download_file(self.bucket_name, key, filename)
                print(f"Downloaded: {filename}")
        else:
            print("No files found in the specified directory.")


    def extract_timestamp_from_filename(self, filename):
        # Extract timestamp using regex (e.g., 20230101 or 2023-01-01)
        match = re.search(r'(\d{4}[-]?\d{2}[-]?\d{2})', filename)
        if match:
            return match.group(1)
        return None

    def read_all_csv_files(self,objects):
       
        dataframes = []
        for obj in objects['Contents']:
            key = obj['Key']
            if key.endswith('.csv'):
                response = self.s3.get_object(Bucket=self.bucket_name, Key=key)
                content = response['Body'].read()
                df = pd.read_csv(BytesIO(content))

                # Extract timestamp from filename and add as a new column
                timestamp = self.extract_timestamp_from_filename(key)
                df['TIMESTAMP'] = timestamp
                df['REGION'] = self.region


                dataframes.append(df)
                print(f"Read CSV from: {key}")

        return dataframes

    def push_data_to_snowflake(self,dataframes):

       for dataframe in dataframes:
            
           dataframe['timestamp'] = dataframe['timestamp'].astype(str)
           self.reader.pandas_to_sf(dataframe,'B2B_MASTERSHEETS')
 
