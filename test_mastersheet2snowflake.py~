import pytest
from unittest.mock import patch, MagicMock
import pandas as pd
from io import BytesIO

from mastersheet2snowflake import Mastersheet2Snowflake  # Ensure this module is accessible

@pytest.fixture
def mock_boto3_client():
    with patch('boto3.client') as mock_client:
        mock_s3 = MagicMock()
        mock_client.return_value = mock_s3
        yield mock_s3

@patch('pandas.read_csv')
def test_read_all_csv_files(mock_read_csv, mock_boto3_client):
    csv_content = b"col1,col2\nval1,val2\nval3,val4"
    mock_df = pd.DataFrame({'col1': ['val1', 'val3'], 'col2': ['val2', 'val4']})
    mock_read_csv.return_value = mock_df

    mock_boto3_client.get_object.side_effect = lambda Bucket, Key: {
        'Body': BytesIO(csv_content)
    }

    objects = [
        {'Key': 'data/na/results_consolidation/master_sheets/file1.csv'},
        {'Key': 'data/na/results_consolidation/master_sheets/file2.csv'}
    ]

    downloader = Mastersheet2Snowflake()
    dataframes = downloader.read_all_csv_files(objects)

    assert len(dataframes) == 2
    for key, df in dataframes:
        assert key.endswith('.csv')
        pd.testing.assert_frame_equal(df, mock_df)
